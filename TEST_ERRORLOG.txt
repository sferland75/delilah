D:\delilah>npm test

> delilah-agentic@1.0.0 test
> jest

 PASS  src/components/ReportGeneration/agents/RangeOfMotion/__tests__/import-test.ts (11.339 s)
 PASS  src/components/ReportGeneration/agents/__tests__/utils.test.ts (11.928 s)
 PASS  src/components/ReportGeneration/agents/RangeOfMotion/__tests__/normalROM.test.ts (12.216 s)
 PASS  src/components/ReportGeneration/agents/RangeOfMotion/__tests__/analysis.test.ts (12.444 s)
 PASS  src/components/ReportGeneration/agents/RangeOfMotion/__tests__/types.test.ts
 PASS  src/components/ReportGeneration/agents/RangeOfMotion/__tests__/formatting.test.ts
 PASS  src/components/ReportGeneration/agents/symptoms/__tests__/PhysicalSymptomsAgent.test.ts (17.67 s)
 PASS  src/components/ReportGeneration/agents/symptoms/__tests__/EmotionalSymptomAgent.test.ts (17.871 s)
 PASS  src/components/ReportGeneration/agents/__tests__/DemographicsAgent.test.ts (17.97 s)
 PASS  src/components/ReportGeneration/agents/__tests__/BaseAgent.test.ts (6.27 s)
 PASS  src/components/ReportGeneration/agents/adl/__tests__/IADLAgent.test.ts (18.5 s)
 PASS  src/components/ReportGeneration/agents/symptoms/__tests__/SymptomIntegrationAgent.test.ts (6.044 s)
 PASS  src/components/ReportGeneration/agents/symptoms/__tests__/CognitiveSymptomAgent.test.ts (18.665 s)
 PASS  src/components/ReportGeneration/agents/RangeOfMotion/__tests__/RangeOfMotionAgent.test.ts (6.402 s)
 PASS  src/components/ReportGeneration/agents/__tests__/TransfersAgent.test.ts (18.766 s)
 FAIL  src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts
  ● Test suite failed to run

    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:20:11 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    20           relevantFindings: ['Normal vital signs', 'Stable condition'],
                 ~~~~~~~~~~~~~~~~
    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:32:11 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    32           relevantFindings: [],
                 ~~~~~~~~~~~~~~~~
    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:72:15 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    72               relevantFindings: [],
                     ~~~~~~~~~~~~~~~~
    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:110:15 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    110               relevantFindings: [],
                      ~~~~~~~~~~~~~~~~

 FAIL  src/components/ReportGeneration/test.ts (18.915 s)
  ● Report Generation System › successfully generates complete reports

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

       8 |     const sections = await orchestrator.generateReport(mockAssessmentData);
       9 |     expect(sections.length).toBeGreaterThan(0);
    > 10 |     expect(sections.every(s => s.valid)).toBe(true);
         |                                          ^
      11 |   });
      12 | });

      at Object.<anonymous> (src/components/ReportGeneration/test.ts:10:42)

 FAIL  src/components/ReportGeneration/__tests__/AgentOrchestrator.test.ts (18.941 s)
  ● AgentOrchestrator › handles empty data gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      22 |     const sections = await orchestrator.generateReport(emptyData);
      23 |     sections.forEach(section => {
    > 24 |       expect(section.valid).toBe(true);
         |                             ^
      25 |       expect(typeof section.content).toBe('string');
      26 |     });
      27 |   });

      at src/components/ReportGeneration/__tests__/AgentOrchestrator.test.ts:24:29
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (src/components/ReportGeneration/__tests__/AgentOrchestrator.test.ts:23:14)

 PASS  src/components/ReportGeneration/agents/__tests__/MobilityAgent.test.ts (18.957 s)
 PASS  src/components/ReportGeneration/agents/narrative/__tests__/TransfersAgent.test.ts (18.969 s)
 FAIL  src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts (19.008 s)
  ● BasicADLAgent › generates appropriate recommendations

    expect(received).toContainEqual(expected) // deep equality

    Expected value: StringContaining "Modified Independent"
    Received array: []

      56 |   it('generates appropriate recommendations', async () => {
      57 |     const result = await agent.processData(mockADLData);
    > 58 |     expect(result.recommendations).toContainEqual(expect.stringContaining('Modified Independent'));
         |                                    ^
      59 |   });
      60 |
      61 |   it('formats output at different detail levels', async () => {

      at Object.<anonymous> (src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts:58:36)

  ● BasicADLAgent › formats output at different detail levels

    expect(received).toContain(expected) // indexOf

    Expected substring: "Modified Independent:"
    Received string:    "Basic ADL Assessment·
    Independent:
    - feeding
    - dressing"

      68 |     const standard = agent.getFormattedContent(processed, 'standard');
      69 |     expect(standard).toContain('Independent:');
    > 70 |     expect(standard).toContain('Modified Independent:');
         |                      ^
      71 |     expect(standard).toContain('bathing (uses Shower chair, Hand-held shower)');
      72 |
      73 |     const detailed = agent.getFormattedContent(processed, 'detailed');

      at Object.<anonymous> (src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts:70:22)

  ● BasicADLAgent › handles empty data gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "total_assistance"
    Received: "not_applicable"

      86 |     const result = await agent.processData(emptyData);
      87 |     expect(result.valid).toBe(true);
    > 88 |     expect(result.activities.feeding.assistanceLevel).toBe(INDEPENDENCE_LEVELS.TOTAL_ASSISTANCE);
         |                                                       ^
      89 |   });
      90 | });

      at Object.<anonymous> (src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts:88:55)

Summary of all failing tests
 FAIL  src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts
  ● Test suite failed to run

    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:20:11 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    20           relevantFindings: ['Normal vital signs', 'Stable condition'],
                 ~~~~~~~~~~~~~~~~
    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:32:11 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    32           relevantFindings: [],
                 ~~~~~~~~~~~~~~~~
    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:72:15 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    72               relevantFindings: [],
                     ~~~~~~~~~~~~~~~~
    src/components/ReportGeneration/agents/__tests__/DocumentationAgent.test.ts:110:15 - error TS2353: Object literal may only specify known properties, and 'relevantFindings' does not exist in type 'DocumentationRecord'.

    110               relevantFindings: [],
                      ~~~~~~~~~~~~~~~~

 FAIL  src/components/ReportGeneration/test.ts (18.915 s)
  ● Report Generation System › successfully generates complete reports

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

       8 |     const sections = await orchestrator.generateReport(mockAssessmentData);
       9 |     expect(sections.length).toBeGreaterThan(0);
    > 10 |     expect(sections.every(s => s.valid)).toBe(true);
         |                                          ^
      11 |   });
      12 | });

      at Object.<anonymous> (src/components/ReportGeneration/test.ts:10:42)

 FAIL  src/components/ReportGeneration/__tests__/AgentOrchestrator.test.ts (18.941 s)
  ● AgentOrchestrator › handles empty data gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      22 |     const sections = await orchestrator.generateReport(emptyData);
      23 |     sections.forEach(section => {
    > 24 |       expect(section.valid).toBe(true);
         |                             ^
      25 |       expect(typeof section.content).toBe('string');
      26 |     });
      27 |   });

      at src/components/ReportGeneration/__tests__/AgentOrchestrator.test.ts:24:29
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (src/components/ReportGeneration/__tests__/AgentOrchestrator.test.ts:23:14)

 FAIL  src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts (19.008 s)
  ● BasicADLAgent › generates appropriate recommendations

    expect(received).toContainEqual(expected) // deep equality

    Expected value: StringContaining "Modified Independent"
    Received array: []

      56 |   it('generates appropriate recommendations', async () => {
      57 |     const result = await agent.processData(mockADLData);
    > 58 |     expect(result.recommendations).toContainEqual(expect.stringContaining('Modified Independent'));
         |                                    ^
      59 |   });
      60 |
      61 |   it('formats output at different detail levels', async () => {

      at Object.<anonymous> (src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts:58:36)

  ● BasicADLAgent › formats output at different detail levels

    expect(received).toContain(expected) // indexOf

    Expected substring: "Modified Independent:"
    Received string:    "Basic ADL Assessment·
    Independent:
    - feeding
    - dressing"

      68 |     const standard = agent.getFormattedContent(processed, 'standard');
      69 |     expect(standard).toContain('Independent:');
    > 70 |     expect(standard).toContain('Modified Independent:');
         |                      ^
      71 |     expect(standard).toContain('bathing (uses Shower chair, Hand-held shower)');
      72 |
      73 |     const detailed = agent.getFormattedContent(processed, 'detailed');

      at Object.<anonymous> (src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts:70:22)

  ● BasicADLAgent › handles empty data gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "total_assistance"
    Received: "not_applicable"

      86 |     const result = await agent.processData(emptyData);
      87 |     expect(result.valid).toBe(true);
    > 88 |     expect(result.activities.feeding.assistanceLevel).toBe(INDEPENDENCE_LEVELS.TOTAL_ASSISTANCE);
         |                                                       ^
      89 |   });
      90 | });

      at Object.<anonymous> (src/components/ReportGeneration/agents/adl/__tests__/BasicADLAgent.test.ts:88:55)


Test Suites: 4 failed, 17 passed, 21 total
Tests:       5 failed, 64 passed, 69 total
Snapshots:   0 total
Time:        20.084 s
Ran all test suites.

D:\delilah>